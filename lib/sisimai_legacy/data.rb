module SisimaiLegacy
  # SisimaiLegacy::Data generate parsed data from SisimaiLegacy::Message object.
  class Data
    # Imported from p5-Sisimail/lib/Sisimai/Data.pm
    require 'sisimai/address'
    require 'sisimai/reason'
    require 'sisimai/string'
    require 'sisimai/rhost'
    require 'sisimai/time'
    require 'sisimai/datetime'

    @@rwaccessors = [
      :catch,           # [?] Results generated by hook method
      :token,           # [String] Message token/MD5 Hex digest value
      :lhost,           # [String] local host name/Local MTA
      :rhost,           # [String] Remote host name/Remote MTA
      :alias,           # [String] Alias of the recipient address
      :listid,          # [String] List-Id header of each ML
      :reason,          # [String] Bounce reason
      :action,          # [String] The value of Action: header
      :subject,         # [String] UTF-8 Subject text
      :timestamp,       # [SisimaiLegacy::Time] Date: header in the original message
      :addresser,       # [SisimaiLegacy::Address] From address
      :recipient,       # [SisimaiLegacy::Address] Recipient address which bounced
      :messageid,       # [String] Message-Id: header
      :replycode,       # [String] SMTP Reply Code
      :smtpagent,       # [String] Module(Engine) name
      :softbounce,      # [Integer] 1 = Soft bounce, 0 = Hard bounce, -1 = ?
      :smtpcommand,     # [String] The last SMTP command
      :destination,     # [String] The domain part of the "recipinet"
      :senderdomain,    # [String] The domain part of the "addresser"
      :feedbacktype,    # [String] Feedback Type
      :diagnosticcode,  # [String] Diagnostic-Code: Header
      :diagnostictype,  # [String] The 1st part of Diagnostic-Code: Header
      :deliverystatus,  # [String] Delivery Status(DSN)
      :timezoneoffset,  # [Integer] Time zone offset(seconds)
    ]
    @@rwaccessors.each { |e| attr_accessor e }

    EndOfEmail = SisimaiLegacy::String.EOM
    RetryIndex = SisimaiLegacy::Reason.retry
    RFC822Head = SisimaiLegacy::RFC5322.HEADERFIELDS(:all)
    AddrHeader = { addresser: RFC822Head[:addresser], recipient: RFC822Head[:recipient] }.freeze
    ActionHead = { failure: 'failed', expired: 'delayed' }.freeze

    # Constructor of SisimaiLegacy::Data
    # @param    [Hash] argvs    Data
    # @return   [SisimaiLegacy::Data] Structured email data
    def initialize(argvs)
      # Create email address object
      as = SisimaiLegacy::Address.make(argvs['addresser'])
      ar = SisimaiLegacy::Address.make(address: argvs['recipient'])

      return nil unless as.is_a? SisimaiLegacy::Address
      return nil unless ar.is_a? SisimaiLegacy::Address
      return nil if as.void
      return nil if ar.void

      @addresser = as
      @recipient = ar
      @senderdomain = as.host
      @destination  = ar.host
      @alias = argvs['alias'] || ''
      @token = SisimaiLegacy::String.token(as.address, ar.address, argvs['timestamp'])
      @timestamp = SisimaiLegacy::Time.parse(::Time.at(argvs['timestamp']).to_s)
      @timezoneoffset = argvs['timezoneoffset'] || '+0000'
      @lhost          = argvs['lhost']          || ''
      @rhost          = argvs['rhost']          || ''
      @catch          = argvs['catch']          || nil
      @reason         = argvs['reason']         || ''
      @listid         = argvs['listid']         || ''
      @subject        = argvs['subject']        || ''
      @messageid      = argvs['messageid']      || ''
      @smtpagent      = argvs['smtpagent']      || ''
      @diagnosticcode = argvs['diagnosticcode'] || ''
      @diagnostictype = argvs['diagnostictype'] || ''
      @deliverystatus = argvs['deliverystatus'] || ''
      @smtpcommand    = argvs['smtpcommand']    || ''
      @feedbacktype   = argvs['feedbacktype']   || ''
      @action         = argvs['action']         || ''
      @replycode      = argvs['replycode']      || ''
      @replycode      = SisimaiLegacy::SMTP::Reply.find(argvs['diagnosticcode']) if @replycode.empty?
      @softbounce     = argvs['softbounce']     || ''
    end

    # Another constructor of SisimaiLegacy::Data
    # @param          [SisimaiLegacy::Message] data Data Object
    # @param          [Hash] argvs            Parser options
    # @options argvs  [Boolean] delivered     true: Including "delivered" reason
    # @return         [Array, Nil]            List of SisimaiLegacy::Data or Nil if the
    #                                         argument is not SisimaiLegacy::Message object
    def self.make(data: nil, **argvs)
      return nil unless data
      return nil unless data.is_a? SisimaiLegacy::Message

      messageobj = data
      rfc822data = messageobj.rfc822
      fieldorder = { :recipient => [], :addresser => [] }
      objectlist = []
      givenorder = argvs[:order] || {}
      delivered1 = argvs[:delivered] || false

      return nil unless messageobj.ds
      return nil unless messageobj.rfc822
      require 'sisimai/smtp'

      # Decide the order of email headers: user specified or system default.
      if givenorder.is_a?(Hash) && !givenorder.empty?
        # If the order of headers for searching is specified, use the order
        # for detecting an email address.
        fieldorder.each_key do |e|
          # The order should be "Array Reference".
          next unless givenorder[e]
          next unless givenorder[e].is_a? Array
          next if givenorder[e].empty?
          fieldorder[e] += givenorder[e]
        end
      end

      fieldorder.each_key do |e|
        # If the order is empty, use default order.
        next unless fieldorder[e].empty?

        # Load default order of each accessor.
        fieldorder[e] = AddrHeader[e]
      end

      eachobject = messageobj.ds.dup
      while e = eachobject.shift do
        # Create parameters for new() constructor.
        p = {
          'catch'          => messageobj.catch  || nil,
          'lhost'          => e['lhost']        || '',
          'rhost'          => e['rhost']        || '',
          'alias'          => e['alias']        || '',
          'action'         => e['action']       || '',
          'reason'         => e['reason']       || '',
          'replycode'      => e['replycode']    || '',
          'smtpagent'      => e['agent']        || '',
          'recipient'      => e['recipient']    || '',
          'softbounce'     => e['softbounce']   || '',
          'smtpcommand'    => e['command']      || '',
          'feedbacktype'   => e['feedbacktype'] || '',
          'diagnosticcode' => e['diagnosis']    || '',
          'diagnostictype' => e['spec']         || '',
          'deliverystatus' => e['status']       || '',
        }
        unless delivered1
          # Skip if the value of "deliverystatus" begins with "2." such as 2.1.5
          next if p['deliverystatus'].start_with?('2.')
        end

        # EMAIL_ADDRESS:
        # Detect email address from message/rfc822 part
        fieldorder[:addresser].each do |f|
          # Check each header in message/rfc822 part
          h = f.downcase
          next unless rfc822data.key?(h)
          next if rfc822data[h].empty?

          j = SisimaiLegacy::Address.find(rfc822data[h]) || []
          next if j.empty?
          p['addresser'] = j[0]
          break
        end

        unless p['addresser']
          # Fallback: Get the sender address from the header of the bounced
          # email if the address is not set at loop above.
          j = SisimaiLegacy::Address.find(messageobj.header['to']) || []
          p['addresser'] = j[0] unless j.empty?
        end
        next unless p['addresser']
        next unless p['recipient']

        # TIMESTAMP:
        # Convert from a time stamp or a date string to a machine time.
        datestring = nil
        zoneoffset = 0
        datevalues = []
        datevalues << e['date'] unless e['date'].to_s.empty?

        # Date information did not exist in message/delivery-status part,...
        RFC822Head[:date].each do |f|
          # Get the value of Date header or other date related header.
          next unless rfc822data[f.downcase]
          datevalues << rfc822data[f.downcase]
        end

        # Set "date" getting from the value of "Date" in the bounce message
        datevalues << messageobj.header['date'] if datevalues.size < 2

        while v = datevalues.shift do
          # Parse each date value in the array
          datestring = SisimaiLegacy::DateTime.parse(v)
          break if datestring
        end

        if datestring && cv = datestring.match(/\A(.+)[ ]+([-+]\d{4})\z/)
          # Get the value of timezone offset from datestring
          # Wed, 26 Feb 2014 06:05:48 -0500
          datestring = cv[1]
          zoneoffset = SisimaiLegacy::DateTime.tz2second(cv[2])
          p['timezoneoffset'] = cv[2]
        end

        begin
          # Convert from the date string to an object then calculate time
          # zone offset.
          t = SisimaiLegacy::Time.strptime(datestring, '%a, %d %b %Y %T')
          p['timestamp'] = (t.to_time.to_i - zoneoffset) || nil
        rescue
          warn ' ***warning: Failed to strptime ' << datestring.to_s
        end
        next unless p['timestamp']

        # OTHER_TEXT_HEADERS:
        recvheader = data.header['received'] || []
        unless recvheader.empty?
          # Get localhost and remote host name from Received header.
          %w[lhost rhost].each { |a| e[a] ||= '' }
          e['lhost'] = SisimaiLegacy::RFC5322.received(recvheader[0]).shift if e['lhost'].empty?
          e['rhost'] = SisimaiLegacy::RFC5322.received(recvheader[-1]).pop  if e['rhost'].empty?
        end

        # Remove square brackets and curly brackets from the host variable
        %w[rhost lhost].each do |v|
          p[v].delete!('[]()')    # Remove square brackets and curly brackets from the host variable
          p[v].sub!(/\A.+=/, '')  # Remove string before "="
          p[v].chomp!("\r")       # Remove CR at the end of the value

          # Check space character in each value and get the first element
          p[v] = p[v].split(' ', 2).shift if p[v].include?(' ')
          p[v].chomp!('.')        # Remove "." at the end of the value
        end

        # Subject: header of the original message
        p['subject'] = rfc822data['subject'] || ''
        p['subject'] = p['subject'].scrub('?').chomp("\r")

        # The value of "List-Id" header
        p['listid'] = rfc822data['list-id'] || ''
        unless p['listid'].empty?
          # Get the value of List-Id header like "List name <list-id@example.org>"
          if cv = p['listid'].match(/\A.*([<].+[>]).*\z/) then p['listid'] = cv[1] end
          p['listid'] = p['listid'].delete('<>').chomp("\r")
          p['listid'] = '' if p['listid'].include?(' ')
        end

        # The value of "Message-Id" header
        p['messageid'] = rfc822data['message-id'] || ''
        unless p['messageid'].empty?
          # Leave only string inside of angle brackets(<>)
          if cv = p['messageid'].match(/\A([^ ]+)[ ].*/) then p['messageid'] = cv[1] end
          if cv = p['messageid'].match(/[<]([^ ]+?)[>]/) then p['messageid'] = cv[1] end
        end

        # CHECK_DELIVERY_STATUS_VALUE:
        # Cleanup the value of "Diagnostic-Code:" header
        p['diagnosticcode'].sub!(/[ \t.]+#{EndOfEmail}/, '')

        unless p['diagnosticcode'].empty?
          # Count the number of D.S.N. and SMTP Reply Code
          vs = SisimaiLegacy::SMTP::Status.find(p['diagnosticcode'])
          vr = SisimaiLegacy::SMTP::Reply.find(p['diagnosticcode'])
          vm = 0
          re = nil

          unless vs.empty?
            # How many times does the D.S.N. appeared
            vm += p['diagnosticcode'].scan(/\b#{vs}\b/).size
            p['deliverystatus'] = vs if vs =~ /\A[45][.][1-9][.][1-9]\z/
          end

          unless vr.empty?
            # How many times does the SMTP reply code appeared
            vm += p['diagnosticcode'].scan(/\b#{vr}\b/).size
            p['replycode'] ||= vr
          end

          if vm > 2
            # Build regular expression for removing string like '550-5.1.1'
            # from the value of "diagnosticcode"
            re = %r/[ ]#{vr}[- ](?:#{vs})?/

            # 550-5.7.1 [192.0.2.222] Our system has detected that this message is
            # 550-5.7.1 likely unsolicited mail. To reduce the amount of spam sent to Gmail,
            # 550-5.7.1 this message has been blocked. Please visit
            # 550 5.7.1 https://support.google.com/mail/answer/188131 for more information.
            p['diagnosticcode'].gsub!(re, ' ')
            p['diagnosticdoee'] = SisimaiLegacy::String.sweep(p['diagnosticcode'])
          end
        end
        p['diagnostictype'] ||= 'X-UNIX' if p['reason'] == 'mailererror'
        p['diagnostictype'] ||= 'SMTP' unless %w[feedback vacation].index(p['reason'])

        # Check the value of SMTP command
        p['smtpcommand'] = '' unless %w[EHLO HELO MAIL RCPT DATA QUIT].index(p['smtpcommand'])

        # Check the value of "action"
        if p['action'].size > 0
          # Action: expanded (to multi-recipient alias)
          if cv = p['action'].match(/\A(.+?) .+/) then p['action'] = cv[1] end

          unless %w[failed delayed delivered relayed expanded].index(p['action'])
            # The value of "action" is not in the following values:
            # "failed" / "delayed" / "delivered" / "relayed" / "expanded"
            ActionHead.each_key do |q|
              next unless p['action'] == q.to_s
              p['action'] = ActionHead[q]
              break
            end
          end
        else
          if p['reason'] == 'expired'
            # Action: delayed
            p['action'] = 'delayed'
          elsif p['deliverystatus'].start_with?('5', '4')
            # Action: failed
            p['action'] = 'failed'
          end
        end

        o = SisimaiLegacy::Data.new(p)
        next unless o.recipient

        if o.reason.empty? || RetryIndex.index(o.reason)
          # Decide the reason of email bounce
          r = ''
          r = SisimaiLegacy::Rhost.get(o) if SisimaiLegacy::Rhost.match(o.rhost) # Remote host dependent error
          r = SisimaiLegacy::Reason.get(o) if r.empty?
          r = 'undefined' if r.empty?
          o.reason = r
        end

        if %w[delivered feedback vacation].index(o.reason)
          # The value of reason is "vacation" or "feedback"
          o.softbounce = -1
          o.replycode = '' unless o.reason == 'delivered'
        else
          # Bounce message which reason is "feedback" or "vacation" does
          # not have the value of "deliverystatus".
          softorhard = nil

          if o.softbounce.to_s.empty?
            # The value is not set yet
            textasargv = (p['deliverystatus'] + ' ' + p['diagnosticcode']).lstrip
            softorhard = SisimaiLegacy::SMTP::Error.soft_or_hard(o.reason, textasargv)

            o.softbounce = if softorhard.size > 0
                             # Returned value is "soft" or "hard"
                             (softorhard == 'soft') ? 1 : 0
                           else
                             # Returned value is an empty string
                             -1
                           end
          end

          if o.deliverystatus.empty?
            # Set pseudo status code
            textasargv = (o.replycode + ' ' + p['diagnosticcode']).lstrip
            getchecked = SisimaiLegacy::SMTP::Error.is_permanent(textasargv)
            tmpfailure = getchecked.nil? ? false : (getchecked ? false : true)
            pseudocode = SisimaiLegacy::SMTP::Status.code(o.reason, tmpfailure)

            unless pseudocode.empty?
              # Set the value of "deliverystatus" and "softbounce"
              o.deliverystatus = pseudocode

              if o.softbounce < 0
                # set the value of "softbounce" again when the value is -1
                softorhard = SisimaiLegacy::SMTP::Error.soft_or_hard(o.reason, pseudocode)

                o.softbounce = if softorhard.size > 0
                                 # Returned value is "soft" or "hard"
                                 softorhard == 'soft' ? 1 : 0
                               else
                                 # Returned value is an empty string
                                 -1
                               end
              end
            end
          end

          unless o.replycode.empty?
            # Check both of the first digit of "deliverystatus" and "replycode"
            o.replycode = '' unless o.replycode[0, 1] == o.deliverystatus[0, 1]
          end

        end
        objectlist << o

      end
      return objectlist
    end

    # Convert from object to hash reference
    # @return   [Hash] Data in Hash reference
    def damn
      data = {}
      @@rwaccessors.each do |e|
        next if %w[addresser recipient timestamp].index(e.to_s)
        data[e.to_s] = self.send(e) || ''
      end
      data['addresser'] = self.addresser.address
      data['recipient'] = self.recipient.address
      data['timestamp'] = self.timestamp.to_time.to_i
      return data
    end
    alias :to_hash :damn

    # Data dumper
    # @param    [String] type   Data format: json, yaml
    # @return   [String, Nil]   Dumped data or nil if the value of the first
    #                           argument is neither "json" nor "yaml"
    def dump(type = 'json')
      return nil unless %w[json yaml].index(type)
      referclass = 'SisimaiLegacy::Data::' << type.upcase

      begin
        require referclass.downcase.gsub('::', '/')
      rescue
        warn '***warning: Failed to load' << referclass
      end

      dumpeddata = Module.const_get(referclass).dump(self)
      return dumpeddata
    end

    # JSON handler
    # @return   [String]            JSON string converted from SisimaiLegacy::Data
    def to_json(*)
      return self.dump('json')
    end

  end
end
